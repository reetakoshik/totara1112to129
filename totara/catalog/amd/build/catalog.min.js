define(["core/templates", "core/ajax", "core/notification", "core/event"], function(a, b, c, d) {
    function e() {
        return this instanceof e ? (this.filterPanelCount = 0, this.overlayClass = "tw-catalog__overlay", this.activePopoverClass = "tw-catalog__activePopover", this.widget = "", this.fetchedData = "", this.pageChangeType = "", this.requestData = {
            debug: !1,
            filterparams: {},
            limitfrom: 0,
            maxcount: -1,
            orderbykey: "featured",
            request: 1,
            resultsonly: !1,
            itemstyle: "narrow"
        }, this.requestItemData = {
            catalogid: 0,
            request: 1
        }, this.lastRequest = {
            catalogid: ""
        }, this.requestEpoch = "", void(this.requestPending = !1)) : new e
    }
    e.prototype = {
        constructor: e,
        bubbledEventsListener: function() {
            var a = this,
                b = "totara_core/select_region_panel",
                c = "totara_core/select_region_primary",
                d = "totara_core/grid",
                e = "totara_catalog/pagination",
                f = "totara_catalog/results_sort",
                g = "totara_catalog/item_style_toggle",
                h = "totara_catalog/toggle_filter_panel";
            this.widget.addEventListener(b + ":add", function(b) {
                a.setFilterAdd(b.detail), a.filterPanelCount++, a.setFilterPanelToggleCount()
            }), this.widget.addEventListener(b + ":changed", function() {
                a.eventFilterChange()
            }), this.widget.addEventListener(b + ":remove", function(b) {
                a.setFilterRemove(b.detail), a.filterPanelCount--, a.setFilterPanelToggleCount()
            }), this.widget.addEventListener(c + ":add", function(b) {
                "catalog_fts" !== b.detail.key || a.requestData.filterparams.catalog_fts || a.setOrderBy({
                    val: "score"
                }), a.setFilterAdd(b.detail)
            }), this.widget.addEventListener(c + ":changed", function() {
                a.eventFilterChange()
            }), this.widget.addEventListener(c + ":remove", function(b) {
                a.setFilterRemove(b.detail)
            }), this.widget.addEventListener(f + ":add", function(b) {
                a.setOrderBy(b.detail)
            }), this.widget.addEventListener(f + ":changed", function() {
                a.eventFilterChange()
            }), this.widget.addEventListener(g + ":add", function(b) {
                a.setItemStyle(b.detail)
            }), this.widget.addEventListener(g + ":changed", function() {
                a.eventFilterChange()
            }), this.widget.addEventListener(e + ":changed", function(b) {
                a.setLimitFrom(b.detail.limitfrom), a.setMaxCount(b.detail.maxcount), a.setPageChangeType("resultsOnly"), a.setResultsOnly(!0), a.contentRequest()
            }), this.widget.addEventListener(h + ":changed", function(b) {
                var c = a.widget.querySelector(b.detail.targetwidget);
                c.classList.toggle(b.detail.toggleClass)
            }), this.widget.addEventListener(d + ":add", function(b) {
                b.detail.val !== a.lastRequest.catalogid && (a.setItemAdd(b.detail), a.setPageChangeType("details"), a.contentRequest())
            })
        },
        checkDebugMode: function() {
            var a = window.location.search.slice(1);
            a = a.split("#")[0];
            for (var b = a.split("&"), c = 0; c < b.length; c++) "debug=true" !== b[c] && "debug=1" !== b[c] || (this.requestData.debug = !0)
        },
        contentRequest: function() {
            var a, b = this;
            this.loadingDisplayAdd().then(function() {
                b.setRequestEpoch(Date.now()), a = b.getData(), a.then(function(a) {
                    if (a.request == b.requestEpoch) {
                        b.setData(a);
                        var c = b.widget.getAttribute("data-tw-catalog-jsRenderState");
                        "locked" === c ? b.requestPending = !0 : (b.widget.setAttribute("data-tw-catalog-jsRenderState", "locked"), b.contentUpdate(), b.contentRequestPageURL())
                    }
                })
            })
        },
        contentRequestPageURL: function() {
            if ("details" !== this.pageChangeType) {
                var a = Object.assign({}, this.requestData);
                delete a.limitfrom, delete a.maxcount, delete a.request, delete a.resultsonly, delete a.debug, this.setPageURL(this.getRequestPathString(a))
            }
        },
        contentUpdate: function() {
            var a, b = this,
                d = this.fetchedData,
                e = this.pageChangeType,
                f = {
                    data: d,
                    renderType: "fullHTML",
                    target: this.widget.querySelector("[data-tw-catalogDebug]"),
                    template: "totara_catalog/debug"
                },
                g = {
                    data: d.pagination_template_data,
                    renderType: "innerHTML",
                    target: this.widget.querySelector("[data-tw-pagination]"),
                    template: "totara_catalog/pagination"
                },
                h = {
                    data: d,
                    renderType: "innerHTML",
                    target: this.widget.querySelector("[data-tw-catalogResultsCount]"),
                    template: "totara_catalog/results_count"
                },
                i = {
                    data: d,
                    renderType: "fullHTML",
                    target: this.widget.querySelector("[data-tw-catalogResultsEmpty]"),
                    template: "totara_catalog/results_empty"
                },
                j = {
                    data: d,
                    renderType: "innerHTML",
                    target: this.widget.querySelector("[data-tw-catalogResultsSort]"),
                    template: "totara_catalog/results_sort"
                },
                k = {
                    data: d.grid_template_data,
                    renderType: "additionalItemHTML",
                    target: this.widget.querySelector("[data-tw-grid]"),
                    template: "totara_core/grid"
                },
                l = {
                    data: d,
                    renderType: "fullHTML",
                    target: this.widget.querySelector('[data-tw-grid-item-id="' + d.id + '"] [data-tw-catalogDetails]'),
                    template: "totara_catalog/details"
                };
            if ("filter" === e) M.util.js_pending("totara_catalog-rendering_template"), a = Promise.all([this.contentUpdateRender(k), this.contentUpdateRender(h), this.contentUpdateRender(g), this.contentUpdateRender(j), this.contentUpdateRender(f), this.contentUpdateRender(i)]);
            else if ("details" === e) M.util.js_pending("totara_catalog-rendering_template"), a = Promise.all([this.contentUpdateRender(l)]);
            else {
                if ("resultsOnly" !== e) return b.widget.setAttribute("data-tw-catalog-jsRenderState", "ready"), void this.loadingDisplayRemove();
                M.util.js_pending("totara_catalog-rendering_template"), a = Promise.all([this.contentUpdateRender(k), this.contentUpdateRender(h), this.contentUpdateRender(g), this.contentUpdateRender(i)])
            }
            a.then(function() {
                b.widget.setAttribute("data-tw-catalog-jsRenderState", "ready"), b.loadingDisplayRemove(), b.setPageChangeType(""), M.util.js_complete("totara_catalog-rendering_template")
            })["catch"](function(a) {
                b.pageError(), c.exception({
                    fileName: "catalog.js",
                    message: a,
                    name: "Error rendering template"
                }), b.widget.setAttribute("data-tw-catalog-jsRenderState", "ready")
            })
        },
        contentUpdateRender: function(b) {
            var c, e = b.data,
                f = document.createRange(),
                g = b.renderType,
                h = b.target,
                i = b.template,
                j = this;
            return new Promise(function(b, k) {
                var l = setTimeout(function() {
                    k("Communication error, could not render " + i)
                }, 45e3);
                a.render(i, e).then(function(e) {
                    if (!h) return void b(i);
                    if (f.selectNode(h), c = f.createContextualFragment(e), "additionalItemHTML" === g) {
                        var k = "[data-tw-grid-item]",
                            m = c.querySelectorAll(k);
                        "resultsOnly" !== j.pageChangeType && (h.innerHTML = "");
                        for (var n = 0; n < m.length; n++) h.appendChild(m[n]);
                        if (j.showOverflowEllipsis(), m && "resultsOnly" === j.pageChangeType) {
                            var o = m[0].querySelector("[data-tw-grid-item-toggle]");
                            o.focus(), o.scrollIntoView({
                                block: "start"
                            })
                        }
                    } else if ("loadingDisplay" === g) h.appendChild(c);
                    else if ("fullHTML" === g) h.innerHTML = "", h.appendChild(c);
                    else if ("innerHTML" === g) {
                        var p = c.querySelector("div"),
                            q = p.querySelector("div");
                        h.innerHTML = "", h.appendChild(q)
                    }
                    d.notifyFilterContentUpdated(h), a.runTemplateJS(""), clearTimeout(l), b(i)
                })
            })
        },
        events: function() {
            var a = this;
            window.onpopstate = function(a) {
                null !== a.state && location.reload()
            }, window.addEventListener("resize", function() {
                var b;
                b || (b = setTimeout(function() {
                    b = null;
                    for (var c = a.widget.querySelectorAll('[data-tw-catalogItem="checked"]'), d = 0; d < c.length; d++) c[d].setAttribute("data-tw-catalogItem", "check"), c[d].classList.remove("tw-catalogItem__showEllipsis");
                    a.showOverflowEllipsis()
                }, 66))
            }), document.addEventListener("click", function(b) {
                var c = document.querySelector("." + a.activePopoverClass);
                if (c && b.target) {
                    var d = b.target.closest("." + a.activePopoverClass);
                    d || c.classList.remove(a.activePopoverClass)
                }
            });
            var b = new MutationObserver(function(b) {
                var c = a.widget.getAttribute("data-tw-catalog-jsRenderState");
                if (a.requestPending && "locked" !== c)
                    for (var d = 0; d < b.length; d++) {
                        var e = b[d].oldValue;
                        "ready" === c && "locked" === e && (a.contentUpdate(), a.contentRequestPageURL())
                    }
            });
            b.observe(this.widget, {
                attributes: !0,
                attributeFilter: ["data-tw-catalog-jsrenderstate"],
                attributeOldValue: !0,
                subtree: !1
            })
        },
        eventFilterChange: function() {
            this.setPageChangeType("filter"), this.setResultsOnly(!1), this.setLimitFrom("0"), this.setMaxCount("-1"), this.contentRequest()
        },
        getData: function() {
            var a, d, e = this;
            "details" === this.pageChangeType ? (a = this.requestItemData, d = "totara_catalog_external_get_details_template_data") : (e.setLastItemRemove(), a = this.requestData, d = "totara_catalog_external_get_catalog_template_data");
            var f = [{
                args: a,
                methodname: d
            }];
            return M.util.js_pending("totara_catalog-requesting_data"), new Promise(function(a, d) {
                var g = b.call(f, !0, !0);
                g[0].done(function(b) {
                    a(b), M.util.js_complete("totara_catalog-requesting_data")
                }).fail(function(a) {
                    c.exception(a), d(a), e.pageError(), M.util.js_complete("totara_catalog-requesting_data")
                })
            })
        },
        getRequestPathString: function(a) {
            var b = "";
            return Object.keys(a).forEach(function(c) {
                var d = a[c];
                "filterparams" === c ? Object.keys(a.filterparams).forEach(function(c) {
                    var d = a.filterparams[c];
                    if (Array.isArray(d)) {
                        if (d.length)
                            for (var e = 0; e < d.length; e++) b += "" === b ? "?" : "&", b += c + "[]=" + d[e]
                    } else b += "" === b ? "?" : "&", b += c + "=" + d
                }) : (b += "" === b ? "?" : "&", b += c + "=" + d)
            }), b
        },
        loadingDisplayAdd: function() {
            var a, b = this;
            a = "details" === this.pageChangeType ? this.widget.querySelector("[data-tw-grid-item-active] [data-tw-catalogDetails]") : "filter" === this.pageChangeType || "resultsOnly" === this.pageChangeType ? this.widget.querySelector("[data-tw-grid]") : this.widget.querySelector("[data-tw-catalogContent]"), a.classList.add(b.overlayClass);
            var c = {
                data: "",
                renderType: "loadingDisplay",
                target: a,
                template: "totara_catalog/loading_overlay"
            };
            return M.util.js_pending("totara_catalog-rendering_template"), new Promise(function(a, d) {
                b.contentUpdateRender(c).then(function() {
                    a(), M.util.js_complete("totara_catalog-rendering_template")
                })["catch"](function() {
                    d()
                })
            })
        },
        loadingDisplayRemove: function() {
            for (var a = this.widget.querySelectorAll("[data-tw-catalog-overlay]"), b = this.widget.parentNode.querySelectorAll("." + this.overlayClass), c = 0; c < a.length; c++) a[c].remove();
            for (var d = 0; d < b.length; d++) b[d].classList.remove(this.overlayClass)
        },
        pageError: function() {
            this.setPageChangeType(""), this.loadingDisplayRemove()
        },
        setData: function(a) {
            this.fetchedData = a
        },
        setFilterAdd: function(a) {
            var b = this.requestData.filterparams;
            a.groupValues ? b[a.key] = a.groupValues : (this.setFilterRemove(a), b[a.key] = a.val)
        },
        setFilterRemove: function(a) {
            var b = this.requestData.filterparams;
            a.groupValues ? b[a.key] = a.groupValues : delete b[a.key]
        },
        setFilterPanelToggleCount: function() {
            var a = this.filterPanelCount >= 1 ? "( " + this.filterPanelCount + " )" : "",
                b = this.widget.querySelector("[data-tw-toggleFilterPanel]");
            b.setAttribute("data-tw-toggleFilterPanel-addLabelContent", a)
        },
        setLimitFrom: function(a) {
            this.requestData.limitfrom = a
        },
        setMaxCount: function(a) {
            this.requestData.maxcount = a
        },
        setOrderBy: function(a) {
            this.requestData.orderbykey = a.val
        },
        setPageChangeType: function(a) {
            this.pageChangeType = a
        },
        setPageURL: function(a) {
            var b = window.location.pathname + a;
            history.pushState({
                ajaxPageChange: !0
            }, null, b)
        },
        setParent: function(a) {
            this.widget = a
        },
        setRequestEpoch: function(a) {
            this.requestEpoch = a, "details" === this.pageChangeType ? this.requestItemData.request = a : this.requestData.request = a
        },
        showOverflowEllipsis: function() {
            for (var a, b, c, d = this.widget.querySelectorAll('[data-tw-catalogItem="check"]'), e = 0; e < d.length; e++) a = d[e], b = a.offsetHeight, c = a.parentNode.offsetHeight, b > c && a.classList.add("tw-catalogItem__showEllipsis"), a.setAttribute("data-tw-catalogItem", "checked")
        },
        setResultsOnly: function(a) {
            this.requestData.resultsonly = a
        },
        setItemAdd: function(a) {
            this.setItemRemove(), this.requestItemData.catalogid = a.val, this.lastRequest.catalogid = a.val
        },
        setItemRemove: function() {
            this.requestItemData.catalogid = ""
        },
        setItemStyle: function(a) {
            this.requestData.itemstyle = a.val
        },
        setLastItemRemove: function() {
            this.lastRequest.catalogid = ""
        }
    };
    var f = function(a) {
        return new Promise(function(b) {
            var c = new e;
            c.setParent(a), c.bubbledEventsListener(), c.events(), c.checkDebugMode(), c.showOverflowEllipsis(), c.loadingDisplayRemove(), b(c)
        })
    };
    return {
        init: f
    }
});